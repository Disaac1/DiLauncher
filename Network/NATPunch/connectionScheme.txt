This is the general NAT punchthrough process:

Client A is the host, and may connect to many other clients.
Client B-Z are clients, and may only connect to the host.

Rendezvous Server (RS) is a server that both A and B-Z can connect to, and is used to exchange information about the clients.

The connection process is conducted over UDP, but a Reliable UDP connection is established after the connection is made.

Client A-Z connect to the RS, and asks for a status.
 - The RS response with the current status
   - OK : RS has no problems and is ready to accept connections
   - BUSY: RS is busy and cannot accept connections
   - No response within 30 seconds: RS is not available
 A-Z> status
 RS > OK


Client A ask the RS to become a host
 - RS receives the request
 - RS Creates a room for Client A
   - RS assigns a unique ID to the room
   - RS assigns a unique ID to Client A
   - RS saves Clients A;s IP and port
 - RS responds to Client A with the room ID and Client A's ID
A> rh
RS> rh:$roomID
RS> rID:$clientID # Ignore this for now this is for dropped connections

Client A Room waits for connections
 - Client A can close this room at any time generally when the host closes the game, but may be done at start of game and not allow any more connections
   - This would rarely close unles the game is closed in order to allow for reconnections
 - RS may close the room if it is idle for too long ( 5 minutes, may extend as excessive keep alive messages are unnecessary)
 - When the room is closed, the RS will send a message to all clients in the room to close the connection
############################################################################################################
Room structure
 - Room ID
 - Room Name
 - Room Status
 - Host
   - Client ID
   - Status
   - IP
   - Port
 - List of clients
   - CLIENT ID
   - Status
   - IP
   - Port

Possible Commands:

Host Only:
 - Close Room (cr) # Closes the room and lets all clients know
 - Kick Client # Cicks the client from the room (Should be send by host directly to client as well incase the Client loses connection to the RS)
   - Kick Client ID (kc:id:$clientID)
   - Kick Client IP (kc:ip:$clientIP)
 - Rename Room (rn:$roomName) # Renames the room


############################################################################################################



Client B-Z asks for a list of rooms
 - RS responds with a list of rooms
B> rl # Request list
RS> rl:$room:$room:$room # rooms